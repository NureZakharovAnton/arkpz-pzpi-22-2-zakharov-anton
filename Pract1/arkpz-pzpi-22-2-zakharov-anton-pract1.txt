Харківський університет радіоелектроніки
Факультет комп'ютерних наук
Кафедра програмної інженерії


	

ЗВІТ 
до практичної роботи номер 1 з дисципліни 
"Аналіз та рефакторинг коду" 
на тему: "Правила оформлення програмного коду"




Виконав ст. гр. ПЗПІ-22-2
Захаров Антон Володимирович

Перевірив
ст. викладач кафедри ПІ
Сокорчук Ігор Петрович








Харків 2024
МЕТА
Ознайомитися з основними рекомендаціями щодо написання чистого, ефективного та підтримуваного коду для мови програмування TypeScript, а також навчитися аналізувати та рефакторити код для покращення його якості.

ВСТУП
TypeScript - сучасна мова програмування від Microsoft, яка розширює можливості JavaScript. Вона додає типізацію даних та інструменти об'єктно-орієнтованого програмування, що робить її потужним інструментом для розробки.
Чому важливо мати чіткі правила написання коду на TypeScript? По-перше, все більше великих проектів обирають цю мову для розробки. По-друге, при роботі в команді потрібно, щоб всі розробники писали код в єдиному стилі. По-третє, система типів TypeScript надає багато можливостей, які треба використовувати правильно. І нарешті, код з складними типами повинен залишатися зрозумілим для всіх учасників проекту.
Список ресурсів у додатку А. Посилання наведено в додатку Б. Презентація зображена у додатку В.

 
РЕКОМЕНДАЦІЇ ДЛЯ НАПИСАННЯ КОДУ
Рекомендація: Використовуйте явну типізацію.
Опис: TypeScript надає можливість явного визначення типів, що робить код більш зрозумілим і безпечним.
Приклад:
// поганий приклад
let name = 'John';
let age = 25;

// гарний приклад  
let name: string = 'John';
let age: number = 25;

Рекомендація: Використовуйте інтерфейси для визначення контрактів. 
Опис: Інтерфейси допомагають визначити структуру об'єктів та забезпечують кращу типізацію.
Приклад:
// поганий приклад
function processUser(user: any) {
    console.log(user.name);
}

// гарний приклад
interface User {
    name: string;
    age: number;
}

function processUser(user: User) {
    console.log(user.name);
}

Рекомендація: Використовуйте enum [1] для константних значень.
Опис: Enum допомагає групувати пов'язані константи та робить код більш типобезпечним.
Приклад:
// поганий приклад
const PENDING = 'PENDING';
const ACTIVE = 'ACTIVE';
const DELETED = 'DELETED';

// гарний приклад
enum Status {
    Pending = 'PENDING',
    Active = 'ACTIVE',
    Deleted = 'DELETED'
}

Рекомендація: Використовуйте union types [2] замість any 
Опис: Union types дозволяють точніше визначити можливі типи значень.
Приклад:
// поганий приклад
function process(value: any) {
    return value;
}

// гарний приклад
function process(value: string | number) {
    return value;
}

Рекомендація: Використовуйте type aliases для складних типів.
Опис: Type aliases роблять код більш читабельним та перевикористовуваним.
Приклад:
// поганий приклад
function processData(callback: (data: string | number) => void) {
    // ...
}

// гарний приклад
type DataType = string | number;
type DataCallback = (data: DataType) => void;

function processData(callback: DataCallback) {
    // ...
}

Рекомендація: Використовуйте readonly для незмінних властивостей.
Опис: Readonly допомагає запобігти випадковим змінам властивостей.
Приклад:
// поганий приклад
interface Config {
    apiUrl: string;
    timeout: number;
}

// гарний приклад
interface Config {
    readonly apiUrl: string;
    readonly timeout: number;
}

Рекомендація: Використовуйте generics для перевикористовуваного коду.
Опис: Generics дозволяють створювати компоненти, що працюють з різними типами даних.
Приклад:
// поганий приклад
function getFirst(arr: any[]): any {
    return arr[0];
}

// гарний приклад
function getFirst<T>(arr: T[]): T {
    return arr[0];
}

Рекомендація: Використовуйте async/await замість колбеків.
Опис: Async/await робить асинхронний код більш читабельним та легшим для розуміння.
Приклад:
// поганий приклад
function fetchData(callback: (error: Error | null, data?: any) => void) {
    // ...
}

// гарний приклад
async function fetchData(): Promise<Data> {
    const response = await fetch('api/data');
    return response.json();
}

Рекомендація: Використовуйте null coalescing та optional chaining. 
Опис: Ці оператори роблять код більш компактним та безпечним.
Приклад:
// поганий приклад
const name = user && user.profile ? user.profile.name : 'Anonymous';

// гарний приклад
const name = user?.profile?.name ?? 'Anonymous';

Рекомендація: Використовуйте type guards для перевірки типів.
Опис: Type guards роблять код більш типобезпечним та читабельним.
Приклад:
// поганий приклад
function process(value: string | number) {
    if ((value as string).toLowerCase) {
        return (value as string).toLowerCase();
    }
    return value;
}

// гарний приклад
function process(value: string | number) {
    if (typeof value === 'string') {
        return value.toLowerCase();
    }
    return value;
}

Рекомендація: Використовуйте декоратори для повторюваної логіки.
Опис: Декоратори дозволяють виділити повторювану логіку в окремі компоненти.
Приклад:
// поганий приклад
class UserService {
    getUser() {
        console.log('Starting request...');
        // logic
        console.log('Request completed');
    }
}

// гарний приклад
function log(target: any, key: string, descriptor: PropertyDescriptor) {
    // logging logic
}

class UserService {
    @log
    getUser() {
        // logic
    }
}

Рекомендація: Використовуйте літеральні типи для обмеження можливих значень.
Опис: Літеральні типи дозволяють точно визначити, які значення може приймати змінна.
Приклад:
// поганий приклад
function setAlignment(alignment: string) {
    // ...
}

// гарний приклад
type Alignment = 'left' | 'right' | 'center';
function setAlignment(alignment: Alignment) {
    // ...
}

Рекомендація: Використовуйте mapped types для трансформації типів.
Опис: Mapped types дозволяють створювати нові типи на основі існуючих.
Приклад:
// поганий приклад
interface ReadOnlyUser {
    readonly name: string;
    readonly age: number;
}
interface EditableUser {
    name: string;
    age: number;
}

// гарний приклад
interface User {
    name: string;
    age: number;
}
type ReadOnly<T> = {
    readonly [P in keyof T]: T[P];
};
type ReadOnlyUser = ReadOnly<User>;

Рекомендація: Використовуйте utility types замість ручного створення типів.
Опис: TypeScript надає багато вбудованих utility types, які можуть зробити код більш лаконічним.
Приклад:
// поганий приклад
type PartialUser = {
    name?: string;
    age?: number;
    email?: string;
};

// гарний приклад
interface User {
    name: string;
    age: number;
    email: string;
}

type PartialUser = Partial<User>;
 
ВИСНОВКИ
Підводячи підсумки проведеної роботи, можна зазначити, що TypeScript надає потужні інструменти для написання якісного та безпечного коду. При розробці важливо максимально використовувати систему типів, явно вказуючи їх там, де це покращує читабельність, використовуючи складні типові конструкції для забезпечення типової безпеки та застосовуючи utility types для стандартних перетворень.
Також необхідно дотримуватися принципів чистого коду, що включає написання самодокументованого коду, використання описових імен та дотримання принципу DRY. Сучасні можливості мови, такі як новітні синтаксичні конструкції, вбудовані можливості для обробки null/undefined та декларативний підхід, повинні активно використовуватися для покращення якості коду.
Особливу увагу слід приділяти безпеці типів, уникаючи використання any, застосовуючи строгі налаштування компілятора та використовуючи type guards. Для забезпечення масштабованості проекту важливо створювати перевикористовувані компоненти, застосовувати патерни проектування та дотримуватися принципів SOLID.
Дотримання цих рекомендацій дозволяє створювати надійний, підтримуваний та ефективний код на TypeScript, що особливо важливо при розробці великих проектів у команді.
 
ДОДАТОК А
Список використаних джерел
1.	TypeScript Documentation. Microsoft. URL: https://www.typescriptlang.org/docs/
2.	TypeScript Deep Dive. Basarat Ali Syed. URL: https://basarat.gitbook.io/typescript/
 
ДОДАТОК Б
Відео на YouTube

https://youtu.be/ZWICcU4h2tY 
ДОДАТОК В
Презентація
