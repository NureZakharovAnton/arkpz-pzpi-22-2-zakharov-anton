МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ

ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ
УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ

Кафедра «Програмна інженерія»



ЗВІТ
З дисципліни «Аналіз та рефакторинг коду»
З лабораторної роботи №2
на тему: " Розробка бази даних для серверної частини програмної системи та прикладного програмного інтерфейсу (API)"





Виконав:								Перевірив: 
ст. гр. ПЗПІ-22-2 							доц. каф. ПІ
Захаров А. В.							Сокорчук І. П.






Харків 2024
МЕТА
Метою роботи є розробити базу даних для серверної частини та прикладного програмного інтерфейсу для програмної системи управління архівом.

ХІД РОБОТИ
	Розробка проєкту розпочалась із створення UML діаграми прецедентів, яка відображає всю функціональність системи та взаємодію користувачів з нею. Діаграма наведена в Додатку А.
Після цього було спроєктовано структуру бази даних та створено ER діаграму (Додаток Б). На основі цієї діаграми було розроблено схему бази даних MongoDB, яка включає всі необхідні колекції та зв'язки між ними. Візуальне представлення структури бази даних знаходиться в Додатку В.
Наступним етапом стала розробка REST API з використанням сучасного фреймворку NestJS. Для полегшення розробки та тестування було створено детальну документацію API за допомогою Postman (Додаток Г). Всі ендпоінти були протестовані за допомогою Postman, а колекція тестів збережена для подальшого використання. Відео захисту наведено в Додатку Е.
В процесі імплементації API було застосовано ряд сучасних технологічних рішень:
1.	Архітектура системи побудована за багаторівневим принципом:
•	Клієнтський рівень: відправка HTTP-запитів до API
•	Серверний рівень: NestJS застосунок для обробки запитів
•	Рівень даних: MongoDB для зберігання інформації
2.	NestJS був обраний як основний фреймворк через:
•	Прогресивну архітектуру з підтримкою модулів
•	Нативну інтеграцію з TypeScript
•	Потужну систему декораторів
•	Вбудований механізм Dependency Injection
•	Гнучку систему middleware
3.	Для взаємодії з базою даних використано Mongoose ODM, що надає:
•	Зручні інструменти для роботи зі схемами
•	Вбудовані механізми валідації
•	Повну підтримку TypeScript
•	Простий спосіб створення та управління зв'язками
4.	Валідація даних забезпечується на різних рівнях:
•	DTO валідація через class-validator
•	Трансформація об'єктів за допомогою class-transformer
•	Валідація на рівні бази даних через Mongoose схеми
5.	MongoDB обрана як СУБД через:
•	Гнучкість схеми даних
•	Високу швидкодію
•	Можливості горизонтального масштабування
•	Природну роботу з JSON-подібними документами
Вся кодова база проєкту доступна в репозиторії GitHub, а ключові фрагменти коду представлені в Додатку Д.

 
 
ВИСНОВКИ
В ході розробки проекту було створено комплексну UML діаграму прецедентів та ER діаграму для системи. На основі цієї документації було розроблено базу даних MongoDB з відповідними колекціями та схемами, а також створено детальну API документацію за допомогою Postman. Серверна частина системи була реалізована з використанням сучасного фреймворку NestJS, який забезпечує модульну архітектуру та підтримку TypeScript. Для роботи з базою даних було обрано Mongoose ODM, що надає зручні інструменти для управління схемами та валідації даних. Валідація запитів забезпечується за допомогою class-validator та class-transformer, а тестування API здійснювалось через Postman.
 
ДОДАТОК А
UML ДІАГРАМА ПРЕЦЕДЕНТІВ

 
Рис А.1. UML діаграма прецедентів
 
ДОДАТОК Б
ER ДІАГРАМА БАЗИ ДАНИХ
    
Рис Б.1. ER діаграма бази даних
 
ДОДАТОК В
ДІАГРАМА СТРУКТУРИ БАЗИ ДАНИХ

 
Рис В.1. Діаграма структури бази даних
 
ДОДАТОК Г
СПЕЦИФІКАЦІЯ API

Authentication
•	All endpoints except Login and Register require Bearer Token authentication
•	Token format: Bearer <your_jwt_token>
•	Tokens expire after 24 hours

HTTP Status Codes
•	200 OK: Successful GET, PUT, PATCH requests
•	201 Created: Successful POST requests
•	204 No Content: Successful DELETE requests
•	400 Bad Request: Invalid request payload or parameters
•	401 Unauthorized: Missing or invalid authentication
•	403 Forbidden: Authenticated but insufficient permissions
•	404 Not Found: Resource not found
•	500 Internal Server Error: Server error

Common Query Parameters
All list endpoints support:
?page=1           // Page number
?limit=10         // Items per page
?sort=field:desc  // Sort by field
?search=term      // Search term

Authentication Endpoints
Register
POST /auth/register
Create new user account
Body:

{
    "email": "user@example.com",
    "password": "SecurePass123",
    "name": "John Doe",
    "role": "customer"
}

Validation:
•	email: Required, valid email format, unique
•	password: Min 8 chars, must contain upper, lower, number
•	name: Required, 2-50 chars
•	role: Either "customer" or "freelancer"

Response (201 Created):

{
    "status": "success",
    "data": {
        "user": {
            "id": "123...",
            "email": "user@example.com",
            "name": "John Doe",
            "role": "customer",
            "createdAt": "2023-12-20T..."
        },
        "token": "eyJhbG..."
    }
}

Login
POST /auth/login
Authenticate existing user
Body:

{
    "email": "user@example.com",
    "password": "SecurePass123"
}
Response (200 OK):

{
    "status": "success",
    "data": {
        "token": "eyJhbG...",
        "user": {
            "id": "123...",
            "email": "user@example.com",
            "name": "John Doe",
            "role": "customer"
        }
    }
}

Users Endpoints
Get All Users
GET /users
Retrieve paginated list of users
Auth Required: Yes Permissions: Admin or platform manager
Query Parameters:
•	role: Filter by role
•	search: Search in name and email
•	page: Page number
•	limit: Users per page
•	sort: Sort field (e.g., createdAt:desc)
Response (200 OK):
{
    "status": "success",
    "data": {
        "users": [
            {
                "id": "123...",
                "email": "user@example.com",
                "name": "John Doe",
                "role": "customer",
                "createdAt": "2023-12-20T...",
                "updatedAt": "2023-12-20T..."
            }
        ],
        "pagination": {
            "total": 100,
            "pages": 10,
            "current": 1,
            "limit": 10
        }
    }
}

Get User By ID
GET /users/:id
Retrieve specific user by ID
Auth Required: Yes Permissions: Own user or admin Parameters:
•	id: User's MongoDB ObjectId
Response (200 OK):

{
    "status": "success",
    "data": {
        "user": {
            "id": "123...",
            "email": "user@example.com",
            "name": "John Doe",
            "role": "customer",
            "createdAt": "2023-12-20T...",
            "updatedAt": "2023-12-20T..."
        }
    }
}

Get Current User
GET /users/me
Retrieve current authenticated user
Auth Required: Yes
Response (200 OK):

{
    "status": "success",
    "data": {
        "user": {
            "id": "123...",
            "email": "user@example.com",
            "name": "John Doe",
            "role": "customer",
            "createdAt": "2023-12-20T...",
            "updatedAt": "2023-12-20T..."
        }
    }
}

Update User
PUT /users/:id
Update user information
Auth Required: Yes Permissions: Own user or admin
Body:

{
    "name": "Updated Name",
    "email": "newemail@example.com"
}

Validation:
•	email: Valid email format, unique
•	name: 2-50 chars
•	Cannot update role through this endpoint
Response (200 OK):
{
    "status": "success",
    "data": {
        "user": {
            "id": "123...",
            "email": "newemail@example.com",
            "name": "Updated Name",
            "role": "customer",
            "updatedAt": "2023-12-20T..."
        }
    }
}

Delete User
DELETE /users/me
Delete current user account
Auth Required: Yes Permissions: Own user or admin
Response (204 No Content)

Jobs Endpoints
Get All Jobs
GET /jobs
Retrieve paginated list of jobs
Auth Required: Yes
Query Parameters:
•	status: Filter by status (open, in_progress, completed)
•	creator: Filter by creator ID
•	minPrice/maxPrice: Price range filtering
•	page: Page number
•	limit: Jobs per page
•	sort: Sort field (e.g., createdAt:desc)

Response (200 OK):
{
    "status": "success",
    "data": {
        "jobs": [
            {
                "id": "123...",
                "name": "Website Development",
                "description": "Create a responsive website",
                "price": 1000,
                "status": "open",
                "creator": {
                    "id": "456...",
                    "name": "John Doe"
                },
                "createdAt": "2023-12-20T...",
                "updatedAt": "2023-12-20T..."
            }
        ],
        "pagination": {
            "total": 100,
            "pages": 10,
            "current": 1,
            "limit": 10
        }
    }
}

Create Job
POST /jobs
Create a new job
Auth Required: Yes Role Required: Customer
Body:
{
    "name": "Website Development",
    "description": "Detailed project description",
    "price": 1000,
    "requirements": ["React", "Node.js"],
    "deadline": "2024-02-01T00:00:00Z"
}

Validation:
•	name: Required, 3-100 chars
•	description: Required, max 2000 chars
•	price: Required, number > 0
•	requirements: Optional array of strings
•	deadline: Optional, must be future date

Response (201 Created):

{
    "status": "success",
    "data": {
        "job": {
            "id": "123...",
            "name": "Website Development",
            "description": "Detailed project description",
            "price": 1000,
            "status": "open",
            "creator": {
                "id": "456...",
                "name": "John Doe"
            },
            "requirements": ["React", "Node.js"],
            "deadline": "2024-02-01T00:00:00Z",
            "createdAt": "2023-12-20T..."
        }
    }
}

Get Job By ID
GET /jobs/:id
Retrieve specific job details
Auth Required: Yes Parameters:
•	id: Job's MongoDB ObjectId
Response (200 OK):

{
    "status": "success",
    "data": {
        "job": {
            "id": "123...",
            "name": "Website Development",
            "description": "Detailed project description",
            "price": 1000,
            "status": "open",
            "creator": {
                "id": "456...",
                "name": "John Doe"
            },
            "createdAt": "2023-12-20T...",
            "updatedAt": "2023-12-20T..."
        }
    }
}

Update Job
PUT /jobs/:id
Update job details
Auth Required: Yes Permissions: Job creator only Parameters:
•	id: Job's MongoDB ObjectId
Body:

{
    "name": "Updated Website Project",
    "description": "Updated description",
    "price": 1200
}

Validation:
•	Cannot update if job status is not 'open'
•	Same validation rules as creation

Response (200 OK):
{
    "status": "success",
    "data": {
        "job": {
            "id": "123...",
            "name": "Updated Website Project",
            "description": "Updated description",
            "price": 1200,
            // ... other fields
        }
    }
}

Delete Job
DELETE /jobs/:id
Delete a job
Auth Required: Yes Permissions: Job creator only Parameters:
•	id: Job's MongoDB ObjectId
Validation:
•	Cannot delete if job has active proposals or is in progress
Response (204 No Content)

Proposals Endpoints
Create Proposal
POST /proposals
Submit a proposal for a job
Auth Required: Yes Role Required: Freelancer
Body:
{
    "jobId": "123...",
    "coverLetter": "I am interested in this project...",
    "expectedDuration": 14, // days
    "proposedPrice": 950
}

Validation:
•	jobId: Must exist and be 'open'
•	coverLetter: Required, max 1000 chars
•	expectedDuration: Required, number > 0
•	proposedPrice: Required, number > 0
•	User cannot submit multiple proposals for same job
Response (201 Created):
{
    "status": "success",
    "data": {
        "proposal": {
            "id": "789...",
            "job": {
                "id": "123...",
                "name": "Website Development"
            },
            "freelancer": {
                "id": "456...",
                "name": "Jane Smith"
            },
            "coverLetter": "I am interested...",
            "expectedDuration": 14,
            "proposedPrice": 950,
            "status": "pending",
            "createdAt": "2023-12-20T..."
        }
    }
}

6. Job Attempts Endpoints
Get All Job Attempts
GET /jobs/:jobId/attempts
Retrieve all attempts for a specific job
Auth Required: Yes Permissions: Job creator or assigned freelancer Parameters:
•	jobId: Job's MongoDB ObjectId
Query Parameters:
•	status: Filter by status
•	page: Page number
•	limit: Items per page
Response (200 OK):
{
    "status": "success",
    "data": {
        "attempts": [
            {
                "id": "123...",
                "job": {
                    "id": "456...",
                    "name": "Website Development"
                },
                "status": "in_progress",
                "assignees": [
                    {
                        "user": {
                            "id": "789...",
                            "name": "Jane Smith"
                        },
                        "status": "active"
                    }
                ],
                "startedAt": "2023-12-20T...",
                "completedAt": null,
                "createdAt": "2023-12-20T...",
                "updatedAt": "2023-12-20T..."
            }
        ],
        "pagination": {
            "total": 5,
            "pages": 1,
            "current": 1,
            "limit": 10
        }
    }
}

Create Job Attempt
POST /jobs/:jobId/attempts
Start a new attempt for a job
Auth Required: Yes Permissions: Job creator only
Body:

{
    "assignees": [
        {
            "userId": "789...",
            "role": "developer"
        }
    ],
    "startDate": "2023-12-21T00:00:00Z",
    "expectedEndDate": "2024-01-21T00:00:00Z"
}

Validation:
•	Job must be in 'open' status
•	Assignees must have accepted proposals
•	Dates must be valid and in future

Response (201 Created):
{
    "status": "success",
    "data": {
        "attempt": {
            "id": "123...",
            "job": {
                "id": "456...",
                "name": "Website Development"
            },
            "status": "in_progress",
            "assignees": [...],
            "startDate": "2023-12-21T00:00:00Z",
            "expectedEndDate": "2024-01-21T00:00:00Z",
            "createdAt": "2023-12-20T..."
        }
    }
}

Update Job Attempt
PUT /jobs/:jobId/attempts/:id
Update attempt status or details
Auth Required: Yes Permissions: Job creator or assigned freelancer
Body:
{
    "status": "completed",
    "completionNotes": "All requirements fulfilled",
    "actualEndDate": "2024-01-19T00:00:00Z"
}

Validation:
•	Valid status transitions only
•	Cannot update completed attempts
•	Proper authorization for status changes

Response (200 OK):
{
    "status": "success",
    "data": {
        "attempt": {
            "id": "123...",
            "status": "completed",
            "completionNotes": "All requirements fulfilled",
            "actualEndDate": "2024-01-19T00:00:00Z",
            // ... other fields
        }
    }
}

Payments Endpoints
Create Payment
POST /payments
Create a new payment for a job
Auth Required: Yes Permissions: Job creator only
Body:
{
    "jobId": "456...",
    "amount": 1000,
    "paymentMethod": "credit_card",
    "currency": "USD"
}

Validation:
•	Job must be completed
•	Amount must match agreed price
•	Valid payment method required
Response (201 Created):
{
    "status": "success",
    "data": {
        "payment": {
            "id": "123...",
            "job": {
                "id": "456...",
                "name": "Website Development"
            },
            "amount": 1000,
            "currency": "USD",
            "status": "pending",
            "paymentMethod": "credit_card",
            "paymentIntentId": "pi_...",
            "createdAt": "2023-12-20T..."
        }
    }
}
Get All Payments
GET /payments
Retrieve payment history
Auth Required: Yes
Query Parameters:
•	status: Payment status
•	startDate/endDate: Date range
•	page: Page number
•	limit: Items per page
Response (200 OK):
{
    "status": "success",
    "data": {
        "payments": [
            {
                "id": "123...",
                "job": {
                    "id": "456...",
                    "name": "Website Development"
                },
                "amount": 1000,
                "currency": "USD",
                "status": "completed",
                "paymentMethod": "credit_card",
                "createdAt": "2023-12-20T...",
                "completedAt": "2023-12-20T..."
            }
        ],
        "pagination": {
            "total": 50,
            "pages": 5,
            "current": 1,
            "limit": 10
        }
    }
}

Reviews Endpoints
Create Review
POST /reviews
Create a review for completed job
Auth Required: Yes Permissions: Job participants only
Body:
{
    "jobId": "456...",
    "revieweeId": "789...",
    "rating": 5,
    "comment": "Excellent work and communication",
    "criteria": {
        "communication": 5,
        "quality": 5,
        "timeliness": 4
    }
}

Validation:
•	Job must be completed
•	Rating: 1-5 stars
•	Comment: Optional, max 1000 chars
•	One review per user per job
•	Must be job participant
Response (201 Created):
{
    "status": "success",
    "data": {
        "review": {
            "id": "123...",
            "job": {
                "id": "456...",
                "name": "Website Development"
            },
            "reviewer": {
                "id": "012...",
                "name": "John Doe"
            },
            "reviewee": {
                "id": "789...",
                "name": "Jane Smith"
            },
            "rating": 5,
            "comment": "Excellent work and communication",
            "criteria": {
                "communication": 5,
                "quality": 5,
                "timeliness": 4
            },
            "createdAt": "2023-12-20T..."
        }
    }
}

Get Reviews
GET /reviews
Get all reviews (with filtering options)
Auth Required: Yes
Query Parameters:
•	userId: Filter by user (reviewer or reviewee)
•	jobId: Filter by job
•	rating: Filter by minimum rating
•	page: Page number
•	limit: Items per page
•	sort: Sort field (e.g., createdAt:desc)
Response (200 OK):
{
    "status": "success",
    "data": {
        "reviews": [
            {
                "id": "123...",
                "job": {
                    "id": "456...",
                    "name": "Website Development"
                },
                "reviewer": {
                    "id": "012...",
                    "name": "John Doe"
                },
                "reviewee": {
                    "id": "789...",
                    "name": "Jane Smith"
                },
                "rating": 5,
                "comment": "Excellent work and communication",
                "criteria": {
                    "communication": 5,
                    "quality": 5,
                    "timeliness": 4
                },
                "createdAt": "2023-12-20T..."
            }
        ],
        "pagination": {
            "total": 100,
            "pages": 10,
            "current": 1,
            "limit": 10
        }
    }
}

Error Handling
All endpoints follow consistent error response format:

{
    "status": "error",
    "message": "Detailed error message",
    "errors": [
        {
            "field": "email",
            "message": "Invalid email format"
        }
    ],
    "code": "400"
}

ДОДАТОК Е
ВІДЕО НА ЮТУБ

https://www.youtube.com/watch?v=xZNegEJFIa4
