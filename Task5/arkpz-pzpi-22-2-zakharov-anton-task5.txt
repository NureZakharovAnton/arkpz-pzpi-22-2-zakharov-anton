Харківський університет радіоелектроніки
Факультет комп'ютерних наук
Кафедра програмної інженерії






ЗВІТ
до лабораторної роботи номер 5 з дисципліни
"Аналіз та рефакторинг коду"
на тему: "РОЗГОРТАННЯ ПРОГРАМНОЇ СИСТЕМИ ТА ДЕМОНСТРАЦІЯ ЇЇ РОБОТИ"




Виконав ст. гр. ПЗПІ-22-2
Захаров Антон Володимирович

Перевірив
ст. викладач кафедри ПІ
Сокорчук Ігор Петрович
 



Харків 2024
1 МЕТА

Метою роботи є розробка та розгортання веб-застосунку для управління замовленнями на виконання робіт з використанням сучасних технологій розробки та контейнеризації.

2 ХІД РОБОТИ

Протягом виконання роботи було розроблено веб-застосунок для управління замовленнями з використанням NestJS та MongoDB. Для розгортання системи використовується Docker контейнеризація.
При розробці системи було використано наступні технології та інструменти: 
– NestJS як основний фреймворк;
– MongoDB Atlas як хмарна база даних; 
– Docker для контейнеризації; 
– TypeScript як мова програмування; 
– JWT для автентифікації; 
– Nodemailer для відправки електронних листів.
Загальний опис інженерних рішень: 
а) серверна частина:
1. мова програмування: TypeScript;
2. фреймворк: NestJS;
3. база даних: MongoDB Atlas;
4. REST API з використанням декораторів NestJS;
5. система автентифікації на основі JWT токенів;
б) IoT пристрій:
1.	платформа: ESP32;
2.	компоненти:
•	LCD дисплей 16x2;
•	RGB світлодіод для індикації статусів:
•	червоний - відхилено;
•	жовтий - в процесі;
•	зелений - завершено;
•	дві кнопки для навігації між замовленнями;
3.	функціональність:
•	відображення назви поточної вакансії на першому рядку;
•	відображення статусу на другому рядку;
•	індикація статусу кольором світлодіода;
•	перемикання між замовленнями за допомогою кнопок;
4.	спосіб зв'язку з сервером:
•	HTTP запити до REST API;
•	періодичне оновлення даних;
5.	середовище розробки та емуляції: Wokwi;
в) взаємодія IoT з сервером:
1.	отримання списку замовлень через REST API;
2.	кешування даних на пристрої;
3.	автоматичне оновлення при зміні статусу;
4.	обробка помилок зв'язку;
г) контейнеризація:
1.	Docker для створення контейнерів;
2.	Docker Compose для оркестрації;
3.	багатоетапна збірка для оптимізації розміру образу;
4.	налаштування змінних середовища через .env файли;
д) додаткові функції:
1.	система резервного копіювання бази даних;
2.	відправка електронних повідомлень;
3.	валідація даних через class-validator;
4.	система ролей та дозволів.
е) розгортання системи:
1.	налаштування змінних середовища;
2.	збірка Docker контейнера;
3.	запуск через Docker Compose.
 
ВИСНОВКИ

В результаті виконання роботи було створено та розгорнуто веб-застосунок для управління замовленнями послуг з використанням сучасних технологій. Застосування Docker дозволило спростити процес розгортання та забезпечити однакове середовище виконання незалежно від системи. Використання NestJS та TypeScript забезпечило типобезпечність та модульність коду, а MongoDB Atlas надав надійне хмарне сховище даних.
Інтеграція з IoT пристроєм дозволила створити зручний фізичний інтерфейс для моніторингу замовлень, що особливо корисно для швидкого огляду статусів без необхідності використання веб-інтерфейсу. Використання кольорової індикації та LCD дисплею забезпечує інтуїтивно зрозумілий спосіб відстеження прогресу замовлень.
Додатково реалізовано систему резервного копіювання, що дозволяє зберігати та відновлювати дані бази даних, та систему сповіщень через електронну пошту. Було зроблено відео з демонстрацією роботи (додаток А).
 
ДОДАТОК А
ВІДЕО НА ЮТУБ

https://www.youtube.com/watch?v=kJdFNBcgzDI
