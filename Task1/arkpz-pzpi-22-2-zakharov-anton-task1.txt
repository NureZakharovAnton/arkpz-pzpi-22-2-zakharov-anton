МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ

ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ
УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ

Кафедра «Програмна інженерія»



ЗВІТ
З дисципліни «Аналіз та рефакторинг коду»
З лабораторної роботи №1





Виконав:								Перевірив: 
ст. гр. ПЗПІ-22-2 							доц. каф. ПІ
Захаров А. В.							Сокорчук І. П.
 







Харків 2024
МЕТА
Метою роботи є створення документа Vision & Scope для програмної системи замовлення послуг із контролем їх виконання.

ХІД РОБОТИ
У процесі розробки програмної системи для замовлення послуг з контролем їх виконання, було здійснено низку етапів, від аналізу вимог до впровадження функціональних можливостей системи. Текст документу наведено в Додатку А. Відео захисту наведено в Додатку Б.

ВИСНОВКИ
В результаті роботи було створено Vision & Scope документ версії 1.0 для системи замовлення послуг. Документ містить опис функціональних можливостей системи, бізнес-вимог, технічних рішень і специфікацій. Основу розробки складають сучасні інструменти, такі як NestJS, MongoDB, React і React Native. Система покликана спростити взаємодію замовників і виконавців, дозволяючи відслідковувати виконання замовлень у реальному часі, підвищити прозорість і автоматизувати контроль за процесом виконання послуг.

ДОДАТОК А
VISION AND SCOPE DOCUMENT (КОНЦЕПЦІЯ ТА РАМКИ ПРОЄКТУ)

1. BUSINESS REQUIREMENTS (БІЗНЕС ВИМОГИ)
1.1 Background (Передумови)
Замовлення послуг часто супроводжується низкою проблем, таких як недостатня прозорість виконання, труднощі в комунікації між сторонами, відсутність єдиного інструменту для моніторингу процесу. Замовники стикаються з низьким рівнем довіри до виконавців, а виконавці — із затримками оплати через суперечки щодо результатів роботи.
Система замовлення послуг із контролем виконання покликана вирішити ці проблеми за рахунок впровадження централізованої платформи для замовників і виконавців.
1.2 Business Opportunity (Бізнес-можливості)
Ринок онлайн-платформ для замовлення послуг активно зростає, проте більшість наявних рішень фокусується лише на функції пошуку виконавців. Нова система запропонує інноваційний підхід, інтегруючи інструменти моніторингу, прозорої комунікації та автоматизації контролю виконання замовлень. Планується використання окремих приладів для провадження системи слідкування за статусом замовлення.

2. VISION OF THE SOLUTION (КОНЦЕПЦІЯ РІШЕННЯ)
2.1 Vision Statement (Окреслення концепції)
Метою розробки є створення програмної системи, яка забезпечить:
1.	Простий і зручний інтерфейс для створення замовлень;
2.	Моніторинг виконання послуг у реальному часі;
3.	Звіти та автоматизацію перевірки виконання замовлень;
4.	Інтеграцію з платіжними системами для прозорої оплати.
2.2 Major Features (Головна функціональність)
1.	Створення замовлень: користувач може вказати опис, дедлайн, бюджет та інші параметри.
2.	Пошук виконавців: алгоритм підбору виконавців на основі рейтингу та навичок.
3.	Моніторинг виконання: замовник може слідкувати за прогресом замовлення у реальному часі.
4.	Автоматизація звітності: генерація фінальних звітів для підтвердження виконання послуг.
5.	Інтеграція з платіжними системами: автоматичне списання коштів після затвердження виконання.
6.	Сповіщення: оповіщення про зміни статусу замовлення.
7.	Індикація на реальному пристрої: відображення статусу замовлення за допомогою світлодіодів на окремому пристрої.

3. SCOPE AND LIMITATIONS (РАМКИ ТА ОБМЕЖЕННЯ)
3.1 Scope of Initial Release (Рамки первинного випуску)
Перший реліз включає основну функціональність:
1.	Реєстрація та авторизація користувачів;
2.	Створення замовлень;
3.	Пошук виконавців;
3.2 Scope of Subsequent Releases (Рамки наступних випусків)
1.	Інтеграція платіжних систем.
2.	Мобільний додаток із підтримкою сповіщень.
3.	Аналітика для замовників і виконавців.
4.	Індикація статусу замовлення за допомогою спеціального пристрою.

4. BUSINESS CONTEXT (БІЗНЕС-КОНТЕКСТ)
4.3 OPERATING ENVIRONMENT (РОБОЧЕ СЕРЕДОВИЩЕ)
Система замовлення послуг із контролем їх виконання буде працювати у середовищах, що забезпечують доступ із різних платформ (веб- та мобільні додатки). Це дозволить максимально ефективно охопити різні категорії користувачів — як тих, що працюють із настільними пристроями, так і тих, що віддають перевагу мобільному доступу.
Для реалізації системи буде використано сучасний стек технологій, що відповідає вимогам надійності, масштабованості та швидкодії:
Backend:
1.	Node.js — використовується як основна серверна мова завдяки високій продуктивності та підтримці великої кількості одночасних з'єднань.
2.	NestJS — дозволяє будувати масштабовані серверні додатки із чіткою архітектурою. Його модульність та інтеграція із сучасними бібліотеками ідеально підходять для створення складних проєктів.
3.	MongoDB — як база даних для гнучкого зберігання даних про користувачів, замовлення та послуги.
4.	Mongoose — ORM для ефективної взаємодії з MongoDB, що спрощує управління схемами даних та їхньою валідацією.
5.	Class-Transformer та Class-Validator — забезпечують автоматичну трансформацію та перевірку вхідних даних, що покращує якість API.
6.	JWT — забезпечує авторизацію користувачів через токени, підвищуючи безпеку та швидкість перевірки доступу.
Frontend (Web):
1.	React — обрано як бібліотеку для розробки інтерфейсу завдяки її ефективності, популярності та великій екосистемі.
2.	Redux/Redux Toolkit — забезпечує ефективне управління станом додатка, зокрема для обробки складних сценаріїв взаємодії з користувачем.
3.	RTK Query — дозволяє легко організувати та кешувати запити до серверного API, покращуючи продуктивність.
4.	Formik та Yup — спрощують обробку форм і валідацію даних.
5.	Material UI — забезпечує готові компоненти для швидкої стилізації та єдиного вигляду інтерфейсу.
Mobile (React Native):
1.	React Native — використовується для створення кросплатформного мобільного додатка, що дозволяє скоротити час розробки, підтримуючи і iOS, і Android.
2.	Redux та Redux Toolkit — аналогічно до веб-додатка, забезпечує управління станом мобільного додатка.
3.	Formik та Yup — використовується для створення та валідації форм на мобільних пристроях.
4.	React Native Material — стилізація мобільного інтерфейсу для створення сучасного та привабливого дизайну.
Інфраструктура:
1.	Хмарна платформа — розгортання бекенда, бази даних та інших сервісів планується на хмарних платформах (наприклад, AWS або Azure), що забезпечує високу доступність і масштабованість.
2.	Безперервна інтеграція та розгортання (CI/CD) — для швидкого впровадження оновлень і автоматизації тестування.
Така архітектура дозволить створити систему, яка буде ефективною, адаптивною та зручною для користувачів із різними пристроями та вимогами.

ДОДАТОК Б
Ютуб-відео
https://youtu.be/aGLnjRwgUzk
